name: Run Tests

on:
    push:
        branches:
          - main
    pull_request:
        branches:
          - main
    release:
        types: [created]
    workflow_dispatch:

permissions:
    contents: write
    checks: write
    issues: write
    pull-requests: write

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v4
        - id: black
          uses: psf/black@stable
          continue-on-error: true
        - id: black2
          if: steps.black.outcome == 'failure'
          uses: psf/black@stable
          with:
            options: ''
        - name: Annotate diff changes using reviewdog
          if: steps.black.outcome == 'failure'
          uses: reviewdog/action-suggester@v1
          with:
            tool_name: blackfmt
        - name: Fail on Linting Issue
          if: steps.black.outcome == 'failure'
          run: exit 1
    unit-tests:
        strategy:
          matrix:
            os: [ubuntu-latest]
            python-version: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.x"]
        runs-on: ${{ matrix.os }}

        steps:
        - uses: actions/checkout@v4

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}

        - name: Cache pip
          uses: actions/cache@v3
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
                ${{ runner.os }}-pip-

        # Upgrade pip and install with dependencies
        - name: Install app and dependencies
          run: |
            python3 -m pip install --upgrade pip
            python3 -m pip install build hatchling
            python3 -m pip install -e .

        - name: Run Pytest with coverage
          run: pytest --cov --cov-report=xml
    
        - name: Upload coverage reports to Codecov
          uses: codecov/codecov-action@v5
          with:
            token: ${{ secrets.CODECOV_TOKEN }}
            slug: VerinFast/modernmetric
    build-and-publish:
        permissions:
          id-token: write
        name: Build and publish Python 🐍 distributions 📦 to PyPI and TestPyPI
        needs: unit-tests
        runs-on: ubuntu-latest
        steps:
        - name: Dump GitHub context
          env:
            GITHUB_CONTEXT: ${{ toJson(github) }}
          run: |
            echo "$GITHUB_CONTEXT"
            echo "${{github.ref}}"
        - uses: actions/checkout@v4
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: "3.x"
        - name: Install pypa/build
          run: >-
            python3 -m
            pip install
            build hatchling
            --user
        - name: Make VERSION
          run: python make_version.py
        - name: Build a binary wheel and a source tarball for Test PyPI
          run: >-
            python3 -m
            build
            --sdist
            --wheel
            --outdir dist/
            .
        - name: Publish distribution 📦 to Test PyPI
          uses: pypa/gh-action-pypi-publish@release/v1
          with:
            repository-url: https://test.pypi.org/legacy/
        - name: Build a binary wheel and a source tarball for PyPI
          run: >-
            rm -rf dist && python3 -m
            build
            --sdist
            --wheel
            --outdir dist/
            .
        - name: Publish distribution 📦 to PyPI
          if: startsWith(github.ref, 'refs/tags')
          uses: pypa/gh-action-pypi-publish@release/v1
